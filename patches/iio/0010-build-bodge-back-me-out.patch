From 068d7ff95f7585b647ab3978596981465761a2e3 Mon Sep 17 00:00:00 2001
From: Jonathan Cameron <jic23@kernel.org>
Date: Mon, 6 Jun 2016 18:54:54 +0100
Subject: [PATCH 10/10] build bodge - back me out

---
 kernel/kexec.c      |  4 ++--
 kernel/kexec_core.c | 20 ++++++++++----------
 2 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/kernel/kexec.c b/kernel/kexec.c
index ed42e73..efddfab 100644
--- a/kernel/kexec.c
+++ b/kernel/kexec.c
@@ -48,8 +48,8 @@ static int kimage_alloc_init(struct kimage **rimage, unsigned long entry,
 
 	if (kexec_on_panic) {
 		/* Verify we have a valid entry point */
-		if ((entry < phys_to_idmap(crashk_res.start)) ||
-		    (entry > phys_to_idmap(crashk_res.end)))
+		//	if ((entry < phys_to_idmap(crashk_res.start)) ||
+		//   (entry > phys_to_idmap(crashk_res.end)))
 			return -EADDRNOTAVAIL;
 	}
 
diff --git a/kernel/kexec_core.c b/kernel/kexec_core.c
index 17987de..4eae8f9 100644
--- a/kernel/kexec_core.c
+++ b/kernel/kexec_core.c
@@ -48,29 +48,29 @@
 
 DEFINE_MUTEX(kexec_mutex);
 
-#include "../mach-keystone/memory.h"
-#define IDMAP_ADDR_OFFSET \
-	(KEYSTONE_HIGH_PHYS_START - KEYSTONE_LOW_PHYS_START)
-#define IDMAP_PFN_OFFSET (IDMAP_ADDR_OFFSET >> PAGE_SHIFT)
+//#include "../mach-keystone/memory.h"
+//#define IDMAP_ADDR_OFFSET					\
+//	(KEYSTONE_HIGH_PHYS_START - KEYSTONE_LOW_PHYS_START)
+//#define IDMAP_PFN_OFFSET (IDMAP_ADDR_OFFSET >> PAGE_SHIFT)
 
 static unsigned long page_to_boot_pfn(struct page *page)
 {
-	return page_to_pfn(page) - IDMAP_PFN_OFFSET;
+	return page_to_pfn(page);// - IDMAP_PFN_OFFSET;
 }
 
 static struct page *boot_pfn_to_page(unsigned long boot_pfn)
 {
-	return pfn_to_page(boot_pfn + IDMAP_PFN_OFFSET);
+	return pfn_to_page(boot_pfn);// + IDMAP_PFN_OFFSET);
 }
 
 static unsigned long virt_to_boot_phys(void *addr)
 {
-	return phys_to_idmap(__pa((unsigned long)addr));
+	return 0;//phys_to_idmap(__pa((unsigned long)addr));
 }
 
 static void *boot_phys_to_virt(unsigned long entry)
 {
-	return phys_to_virt(idmap_to_phys(entry));
+	return NULL;//phys_to_virt(idmap_to_phys(entry));
 }
 
 /* Per cpu memory for storing cpu states in case of system crash. */
@@ -252,8 +252,8 @@ int sanity_check_segment_list(struct kimage *image)
 			mstart = image->segment[i].mem;
 			mend = mstart + image->segment[i].memsz - 1;
 			/* Ensure we are within the crash kernel limits */
-			if ((mstart < phys_to_idmap(crashk_res.start)) ||
-			    (mend > phys_to_idmap(crashk_res.end)))
+			//		if ((mstart < phys_to_idmap(crashk_res.start)) ||
+			//		    (mend > phys_to_idmap(crashk_res.end)))
 				return result;
 		}
 	}
-- 
2.8.1

